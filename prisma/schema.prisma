generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  MOD
  USER
}

enum Status {
  ACTIVE
  TERMINATED
}

enum Interest {
  WEB_DEVELOPMENT
  MOBILE_DEVELOPMENT
  BACKEND_DEVELOPMENT
  FRONTEND_DEVELOPMENT
  FULLSTACK_DEVELOPMENT
  GAME_DEVELOPMENT
  DESKTOP_DEVELOPMENT

  JAVASCRIPT
  PYTHON
  JAVA
  TYPESCRIPT
  CSHARP
  GO
  RUST
  PHP

  REACT
  ANGULAR
  VUE
  NODEJS
  DJANGO
  SPRING
  DOTNET
  FLUTTER
  REACT_NATIVE

  DATA_SCIENCE
  MACHINE_LEARNING
  ARTIFICIAL_INTELLIGENCE
  BIG_DATA
  DATA_ANALYTICS

  CLOUD_COMPUTING
  DEVOPS
  DOCKER
  KUBERNETES
  AWS
  AZURE
  MICROSERVICES

  SQL_DATABASES
  NOSQL_DATABASES
  DATABASE_DESIGN

  CYBERSECURITY
  ETHICAL_HACKING
  WEB_SECURITY

  UI_UX_DESIGN
  WEB_DESIGN
  PRODUCT_DESIGN

  BLOCKCHAIN
  CRYPTOCURRENCY
  WEB3
  IOT
  AR_VR
  QUANTUM_COMPUTING

  SOFTWARE_ARCHITECTURE
  API_DEVELOPMENT
  TESTING
  AGILE_METHODOLOGIES

  LINUX
  OPEN_SOURCE
  GIT_VERSION_CONTROL
  NETWORKING
}

model User {
  id                                String        @id @default(uuid())
  username                          String        @unique @db.VarChar(15)
  email                             String        @unique @db.VarChar(345)
  password                          String?       @db.VarChar(60)
  profilePictureUrl                 String?
  profilePictureKey                 String?
  bio                               String?       @db.VarChar(150)
  interests                         Interest[]
  reputationPoints                  Int           @default(0)
  role                              Role          @default(USER)
  questionsAsked                    Int           @default(0)
  answersGiven                      Int           @default(0)
  bestAnswers                       Int           @default(0)
  achievements                      Achievement[]
  status                            Status        @default(ACTIVE)
  otp                               String?       @db.Char(6)
  otpResendAvailableAt              DateTime?
  otpExpireAt                       DateTime?
  resetPasswordOtp                  String?       @db.Char(6)
  resetPasswordOtpVerified          Boolean?
  resetPasswordOtpResendAvailableAt DateTime?
  resetPasswordOtpExpireAt          DateTime?
  isVerified                        Boolean       @default(false)
  createdAt                         DateTime      @default(now())
}

model Achievement {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  name        String   @db.VarChar(15)
  description String   @db.VarChar(100)
  createdAt   DateTime @default(now())
}
